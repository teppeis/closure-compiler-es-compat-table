// exponentiation (**) operator: basic support
module.exports = function() {
return 2 ** 3 === 8 && -(5 ** 2) === -25 && (-5) ** 2 === 25;
         
};
./es2016plus/build/0/in.js:3: WARNING - Parse error. this language feature is only supported for ECMASCRIPT7 mode or better: exponent operator (**)
return 2 ** 3 === 8 && -(5 ** 2) === -25 && (-5) ** 2 === 25;
                         ^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// exponentiation (**) operator: assignment
module.exports = function() {
var a = 2; a **= 3; return a === 8;
         
};
./es2016plus/build/1/in.js:3: WARNING - Parse error. this language feature is only supported for ECMASCRIPT7 mode or better: exponent operator (**)
var a = 2; a **= 3; return a === 8;
           ^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// Proxy, "enumerate" handler removed
module.exports = function() {
var passed = true;
     var proxy = new Proxy({}, {
     enumerate: function() {
     passed = false;
     }
     });
     for(var key in proxy); // Should not throw, nor execute the 'enumerate' method.
     return passed;
     
};
./es2016plus/build/11/in.js:9: WARNING - If this if/for/while really shouldn't have a body, use {}
     for(var key in proxy); // Should not throw, nor execute the 'enumerate' method.
                          ^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// trailing commas in function syntax: in parameter lists
module.exports = function() {
return typeof function f( a, b, ){} === 'function';
        
};
./es2016plus/build/19/in.js:3: ERROR - Parse error. Invalid trailing comma in formal parameter list
return typeof function f( a, b, ){} === 'function';
                              ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// trailing commas in function syntax: in argument lists
module.exports = function() {
return Math.min(1,2,3,) === 1;
        
};
./es2016plus/build/20/in.js:3: ERROR - Parse error. Invalid trailing comma in arguments list
return Math.min(1,2,3,) === 1;
                      ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// async functions: basic support
module.exports = function() {
return (async function(){
            return 42;
          })() instanceof Promise
        
};
./es2016plus/build/21/in.js:3: WARNING - Parse error. this language feature is only supported for ECMASCRIPT8 mode or better: async function
return (async function(){
        ^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// async functions: await support
module.exports = function() {
return (async function(){
            return 10 + await Promise.resolve(10);
          })() instanceof Promise
        
};
./es2016plus/build/22/in.js:3: WARNING - Parse error. this language feature is only supported for ECMASCRIPT8 mode or better: async function
return (async function(){
        ^

./es2016plus/build/22/in.js:4: WARNING - Parse error. this language feature is only supported for ECMASCRIPT8 mode or better: async function
            return 10 + await Promise.resolve(10);
                        ^

0 error(s), 2 warning(s)
--------------------------------------------------------------------------------
// async functions: arrow async functions
module.exports = function() {
return (async () => 42 + await Promise.resolve(42))() instanceof Promise
        
};
./es2016plus/build/23/in.js:3: WARNING - Parse error. this language feature is only supported for ECMASCRIPT8 mode or better: async function
return (async () => 42 + await Promise.resolve(42))() instanceof Promise
        ^

./es2016plus/build/23/in.js:3: WARNING - Parse error. this language feature is only supported for ECMASCRIPT8 mode or better: async function
return (async () => 42 + await Promise.resolve(42))() instanceof Promise
                         ^

0 error(s), 2 warning(s)
--------------------------------------------------------------------------------
// class extends null: proper default constructor
module.exports = function() {
class C extends null {}
         return new C instanceof C;
         
};
./es2016plus/build/24/in.js:3: ERROR - The class in an extends clause must be a qualified name.
class C extends null {}
                ^^^^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// class extends null: proper "this" binding
module.exports = function() {
var passed = false;
         new class C extends null {
         constructor() {
         passed = (this instanceof C && !(this instanceof Object));
         return this;
         }
         };
         return passed;
         
};
./es2016plus/build/25/in.js:5: ERROR - constructor is missing a call to super()
         constructor() {
         ^^^^^^^^^^^^^^^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// assignments allowed in for-in head in non-strict mode
module.exports = function() {
for (var i = 0 in {}) {}
     return i === 0;
     
};
./es2016plus/build/49/in.js:3: ERROR - Parse error. for-in statement may not have initializer
for (var i = 0 in {}) {}
               ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
