// Proxy, "enumerate" handler removed
module.exports = function() {
var passed = true;
     var proxy = new Proxy({}, {
     enumerate: function() {
     passed = false;
     }
     });
     for(var key in proxy); // Should not throw, nor execute the 'enumerate' method.
     return passed;
     
};
./build/11/in.js:9: WARNING - If this if/for/while really shouldn't have a body, use {}
     for(var key in proxy); // Should not throw, nor execute the 'enumerate' method.
                          ^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// trailing commas in function syntax: in parameter lists
module.exports = function() {
return typeof function f( a, b, ){} === 'function';
        
};
./build/19/in.js:3: ERROR - Parse error. Invalid trailing comma in formal parameter list
return typeof function f( a, b, ){} === 'function';
                              ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// trailing commas in function syntax: in argument lists
module.exports = function() {
return Math.min(1,2,3,) === 1;
        
};
./build/20/in.js:3: ERROR - Parse error. Invalid trailing comma in arguments list
return Math.min(1,2,3,) === 1;
                      ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// class extends null: proper default constructor
module.exports = function() {
class C extends null {}
         return new C instanceof C;
         
};
./build/24/in.js:3: ERROR - The class in an extends clause must be a qualified name.
class C extends null {}
                ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// class extends null: proper "this" binding
module.exports = function() {
var passed = false;
         new class C extends null {
         constructor() {
         passed = (this instanceof C && !(this instanceof Object));
         return this;
         }
         };
         return passed;
         
};
./build/25/in.js:5: ERROR - constructor is missing a call to super()
         constructor() {
         ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// assignments allowed in for-in head in non-strict mode
module.exports = function() {
for (var i = 0 in {}) {}
     return i === 0;
     
};
./build/49/in.js:3: ERROR - Parse error. for-in statement may not have initializer
for (var i = 0 in {}) {}
               ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
