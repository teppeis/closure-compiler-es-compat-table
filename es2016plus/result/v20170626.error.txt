// Proxy, "enumerate" handler removed
module.exports = function() {
var passed = true;
     var proxy = new Proxy({}, {
     enumerate: function() {
     passed = false;
     }
     });
     for(var key in proxy); // Should not throw, nor execute the 'enumerate' method.
     return passed;
     
};
./es2016plus/build/11/in.js:9: WARNING - If this if/for/while really shouldn't have a body, use {}
     for(var key in proxy); // Should not throw, nor execute the 'enumerate' method.
                          ^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// trailing commas in function syntax: in parameter lists
module.exports = function() {
return typeof function f( a, b, ){} === 'function';
        
};
./es2016plus/build/19/in.js:3: ERROR - Parse error. Invalid trailing comma in formal parameter list
return typeof function f( a, b, ){} === 'function';
                              ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// trailing commas in function syntax: in argument lists
module.exports = function() {
return Math.min(1,2,3,) === 1;
        
};
./es2016plus/build/20/in.js:3: ERROR - Parse error. Invalid trailing comma in arguments list
return Math.min(1,2,3,) === 1;
                      ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// async functions: correct prototype chain
module.exports = function() {
var asyncFunctionProto = Object.getPrototypeOf(async function (){});
          return asyncFunctionProto !== function(){}.prototype
            && Object.getPrototypeOf(asyncFunctionProto) === Function.prototype;
          return passed;
        
};
./es2016plus/build/33/in.js:6: WARNING - unreachable code
          return passed;
          ^^^^^^^^^^^^^^

0 error(s), 1 warning(s)
--------------------------------------------------------------------------------
// assignments allowed in for-in head in non-strict mode
module.exports = function() {
for (var i = 0 in {}) {}
     return i === 0;
     
};
./es2016plus/build/76/in.js:3: ERROR - Parse error. for-in statement may not have initializer
for (var i = 0 in {}) {}
               ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
// template literal revision
module.exports = function() {
function tag(strings, a) {
     return strings[0] === void 0 &&
     strings.raw[0] === "\\01\\1\\xg\\xAg\\u0\\u0g\\u00g\\u000g\\u{g\\u{0\\u{110000}" &&
     strings[1] === "\0" &&
     strings.raw[1] === "\\0" &&
     a === 0;
     }
     return tag`\01\1\xg\xAg\u0\u0g\u00g\u000g\u{g\u{0\u{110000}${0}\0`;
     
};
./es2016plus/build/77/in.js:10: ERROR - Parse error. Hex digit expected
     return tag`\01\1\xg\xAg\u0\u0g\u00g\u000g\u{g\u{0\u{110000}${0}\0`;
                       ^

1 error(s), 0 warning(s)
--------------------------------------------------------------------------------
