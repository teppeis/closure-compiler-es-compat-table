["proper tail calls (tail call optimisation)","arrow functions: 0 parameters","arrow functions: 1 parameter, no brackets","arrow functions: multiple parameters","arrow functions: lexical \"this\" binding","arrow functions: can't be bound, can be curried","arrow functions: lexical \"arguments\" binding","arrow functions: no line break between params and <code>=></code>","arrow functions: no \"prototype\" and \"name\" properties","const: basic support","const: is block-scoped","const: redefining a const is a syntax error","const: temporal dead zone","const: basic support (strict mode)","const: is block-scoped (strict mode)","const: redefining a const (strict mode)","const: temporal dead zone (strict mode)","let: basic support","let: is block-scoped","let: for-loop statement scope","let: temporal dead zone","let: for-loop iteration scope","let: basic support (strict mode)","let: is block-scoped (strict mode)","let: for-loop statement scope (strict mode)","let: temporal dead zone (strict mode)","let: for-loop iteration scope (strict mode)","default function parameters: basic functionality","default function parameters: explicit undefined defers to the default","default function parameters: defaults can refer to previous params","default function parameters: temporal dead zone","rest parameters","spread (...) operator: with arrays, in function calls","spread (...) operator: with arrays, in array literals","spread (...) operator: with strings, in function calls","spread (...) operator: with strings, in array literals","class: class statement","class: class expression","class: constructor","class: prototype methods","class: static methods","class: extends","super","object literal extensions: computed properties","object literal extensions: shorthand properties","object literal extensions: shorthand methods","for..of loops","generators: basic functionality","generators: yield *","generators: shorthand generator methods","octal and binary literals: octal literals","octal and binary literals: binary literals","octal and binary literals: octal supported by Number()","octal and binary literals: binary supported by Number()","template strings: basic functionality","template strings: tagged template strings","RegExp \"y\" and \"u\" flags: \"y\" flag","RegExp \"y\" and \"u\" flags: \"u\" flag","typed arrays: Int8Array","typed arrays: Uint8Array","typed arrays: Uint8ClampedArray","typed arrays: Int16Array","typed arrays: Uint16Array","typed arrays: Int32Array","typed arrays: Uint32Array","typed arrays: Float32Array","typed arrays: Float64Array","typed arrays: DataView (Int8)","typed arrays: DataView (Uint8)","typed arrays: DataView (Int16)","typed arrays: DataView (Uint16)","typed arrays: DataView (Int32)","typed arrays: DataView (Uint32)","typed arrays: DataView (Float32)","typed arrays: DataView (Float64)","typed arrays: %TypedArray%.from","typed arrays: %TypedArray%.of","typed arrays: %TypedArray%.prototype.subarray","typed arrays: %TypedArray%.prototype.join","typed arrays: %TypedArray%.prototype.indexOf","typed arrays: %TypedArray%.prototype.lastIndexOf","typed arrays: %TypedArray%.prototype.slice","typed arrays: %TypedArray%.prototype.every","typed arrays: %TypedArray%.prototype.filter","typed arrays: %TypedArray%.prototype.forEach","typed arrays: %TypedArray%.prototype.map","typed arrays: %TypedArray%.prototype.reduce","typed arrays: %TypedArray%.prototype.reduceRight","typed arrays: %TypedArray%.prototype.reverse","typed arrays: %TypedArray%.prototype.some","typed arrays: %TypedArray%.prototype.sort","typed arrays: %TypedArray%.prototype.copyWithin","typed arrays: %TypedArray%.prototype.find","typed arrays: %TypedArray%.prototype.findIndex","typed arrays: %TypedArray%.prototype.fill","typed arrays: %TypedArray%.prototype.keys","typed arrays: %TypedArray%.prototype.values","typed arrays: %TypedArray%.prototype.entries","Map","Set","WeakMap","WeakSet","Proxy: \"get\" handler","Proxy: \"set\" handler","Proxy: \"has\" handler","Proxy: \"deleteProperty\" handler","Proxy: \"getOwnPropertyDescriptor\" handler","Proxy: \"defineProperty\" handler","Proxy: \"getPrototypeOf\" handler","Proxy: \"setPrototypeOf\" handler","Proxy: \"isExtensible\" handler","Proxy: \"preventExtensions\" handler","Proxy: \"enumerate\" handler","Proxy: \"ownKeys\" handler","Proxy: \"apply\" handler","Proxy: \"construct\" handler","Proxy: Proxy.revocable","Reflect: Reflect.apply","Reflect: Reflect.construct","Reflect: Reflect.defineProperty","Reflect: Reflect.deleteProperty","Reflect: Reflect.getOwnPropertyDescriptor","Reflect: Reflect.getPrototypeOf","Reflect: Reflect.has","Reflect: Reflect.isExtensible","Reflect: Reflect.set","Reflect: Reflect.setPrototypeOf","block-level function declaration","destructuring: array destructuring","destructuring: object destructuring","destructuring: combined destructuring","destructuring: destructuring parameters","destructuring: destructuring rest","destructuring: destructuring defaults","destructuring: defaults in parameters","Promise","Object static methods: Object.assign","Object static methods: Object.is","Object static methods: Object.getOwnPropertySymbols","Object static methods: Object.setPrototypeOf","function \"name\" property: function statements","function \"name\" property: function expressions","function \"name\" property: new Function","function \"name\" property: bound functions","function \"name\" property: variables (function)","function \"name\" property: object methods (function)","function \"name\" property: accessor properties","function \"name\" property: shorthand methods","function \"name\" property: symbol-keyed methods","function \"name\" property: class statements","function \"name\" property: class expressions","function \"name\" property: variables (class)","function \"name\" property: object methods (class)","function \"name\" property: class prototype methods","function \"name\" property: class static methods","function \"name\" property: isn't writable, is configurable","Function.prototype.toMethod","String static methods: String.raw","String static methods: String.fromCodePoint","String.prototype methods: String.prototype.codePointAt","String.prototype methods: String.prototype.normalize","String.prototype methods: String.prototype.repeat","String.prototype methods: String.prototype.startsWith","String.prototype methods: String.prototype.endsWith","String.prototype methods: String.prototype.contains","Unicode code point escapes","Symbol: basic functionality","Symbol: typeof support","Symbol: symbol keys are hidden to pre-ES6 code","Symbol: Object.defineProperty support","Symbol: cannot coerce to string or number","Symbol: can convert with String()","Symbol: new Symbol() throws","Symbol: Object(symbol)","global symbol registry","well-known symbols: Symbol.hasInstance","well-known symbols: Symbol.isConcatSpreadable","well-known symbols: Symbol.isRegExp","well-known symbols: Symbol.iterator","well-known symbols: Symbol.toPrimitive","well-known symbols: Symbol.toStringTag","well-known symbols: Symbol.unscopables","RegExp.prototype methods: RegExp.prototype.match","RegExp.prototype methods: RegExp.prototype.replace","RegExp.prototype methods: RegExp.prototype.split","RegExp.prototype methods: RegExp.prototype.search","Array static methods: Array.from","Array static methods: Array.of","Array.prototype methods: Array.prototype.copyWithin","Array.prototype methods: Array.prototype.find","Array.prototype methods: Array.prototype.findIndex","Array.prototype methods: Array.prototype.fill","Array.prototype methods: Array.prototype.keys","Array.prototype methods: Array.prototype.values","Array.prototype methods: Array.prototype.entries","Array.prototype methods: Array.prototype[Symbol.unscopables]","Number properties: Number.isFinite","Number properties: Number.isInteger","Number properties: Number.isSafeInteger","Number properties: Number.isNaN","Number properties: Number.EPSILON","Number properties: Number.MIN_SAFE_INTEGER","Number properties: Number.MAX_SAFE_INTEGER","Math methods: Math.clz32","Math methods: Math.imul","Math methods: Math.sign","Math methods: Math.log10","Math methods: Math.log2","Math methods: Math.log1p","Math methods: Math.expm1","Math methods: Math.cosh","Math methods: Math.sinh","Math methods: Math.tanh","Math methods: Math.acosh","Math methods: Math.asinh","Math methods: Math.atanh","Math methods: Math.hypot","Math methods: Math.trunc","Math methods: Math.fround","Math methods: Math.cbrt","__proto__ in object literals: basic support","__proto__ in object literals: multiple __proto__ is an error","__proto__ in object literals: not a computed property","__proto__ in object literals: not a shorthand property","__proto__ in object literals: not a shorthand method","hoisted block-level function declaration","Object.prototype.__proto__: get prototype","Object.prototype.__proto__: set prototype","Object.prototype.__proto__: correct property descriptor","String.prototype HTML methods","RegExp.prototype.compile"]