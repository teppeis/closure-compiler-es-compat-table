build/2/out.js: default function parameters: basic functionality
build/3/out.js: default function parameters: explicit undefined defers to the default
build/4/out.js: default function parameters: defaults can refer to previous params
build/5/out.js: default function parameters: temporal dead zone
build/6/out.js: default function parameters: separate scope
build/8/out.js: rest parameters: basic functionality
build/11/out.js: rest parameters: can't be used in setters
build/13/out.js: spread (...) operator: with arrays, in function calls
build/14/out.js: spread (...) operator: with arrays, in array literals
build/15/out.js: spread (...) operator: with sparse arrays, in function calls
build/28/out.js: object literal extensions: computed properties
build/29/out.js: object literal extensions: shorthand properties
build/30/out.js: object literal extensions: shorthand methods
build/32/out.js: object literal extensions: computed shorthand methods
build/34/out.js: for..of loops: with arrays
build/35/out.js: for..of loops: with sparse arrays
build/36/out.js: for..of loops: with strings
build/38/out.js: for..of loops: with generator instances
build/43/out.js: octal and binary literals: octal literals
build/44/out.js: octal and binary literals: binary literals
build/45/out.js: octal and binary literals: octal supported by Number()
build/46/out.js: octal and binary literals: binary supported by Number()
build/49/out.js: template strings: tagged template strings
build/50/out.js: template strings: line break normalisation
build/53/out.js: destructuring: with arrays
build/54/out.js: destructuring: with sparse arrays
build/55/out.js: destructuring: with strings
build/64/out.js: destructuring: with objects
build/65/out.js: destructuring: object destructuring with primitives
build/66/out.js: destructuring: trailing commas in object patterns
build/68/out.js: destructuring: parenthesised left-hand-side is a syntax error
build/71/out.js: destructuring: computed properties
build/72/out.js: destructuring: multiples in a single var statement
build/73/out.js: destructuring: nested
build/74/out.js: destructuring: in parameters
build/75/out.js: destructuring: in parameters, 'arguments' interaction
build/77/out.js: destructuring: in parameters, function 'length' property
build/78/out.js: destructuring: in for-in loop heads
build/79/out.js: destructuring: in for-of loop heads
build/80/out.js: destructuring: rest
build/82/out.js: destructuring: empty patterns
build/83/out.js: destructuring: empty patterns in parameters
build/84/out.js: destructuring: defaults
build/85/out.js: destructuring: defaults in parameters
build/86/out.js: destructuring: defaults, let temporal dead zone
build/87/out.js: destructuring: defaults in parameters, separate scope
build/89/out.js: Unicode code point escapes: in strings
build/93/out.js: const: basic support
build/94/out.js: const: is block-scoped
build/97/out.js: const: basic support (strict mode)
build/98/out.js: const: is block-scoped (strict mode)
build/99/out.js: const: redefining a const (strict mode)
build/101/out.js: let: basic support
build/102/out.js: let: is block-scoped
build/103/out.js: let: for-loop statement scope
build/105/out.js: let: for-loop iteration scope
build/106/out.js: let: basic support (strict mode)
build/107/out.js: let: is block-scoped (strict mode)
build/108/out.js: let: for-loop statement scope (strict mode)
build/110/out.js: let: for-loop iteration scope (strict mode)
build/111/out.js: block-level function declaration
build/112/out.js: arrow functions: 0 parameters
build/113/out.js: arrow functions: 1 parameter, no brackets
build/114/out.js: arrow functions: multiple parameters
build/115/out.js: arrow functions: lexical "this" binding
build/116/out.js: arrow functions: "this" unchanged by call or apply
build/117/out.js: arrow functions: can't be bound, can be curried
build/118/out.js: arrow functions: lexical "arguments" binding
build/119/out.js: arrow functions: no line break between params and <code>=></code>
build/120/out.js: arrow functions: correct precedence
build/122/out.js: arrow functions: lexical "super" binding
build/124/out.js: class: class statement
build/125/out.js: class: is block-scoped
build/128/out.js: class: constructor
build/129/out.js: class: prototype methods
build/131/out.js: class: computed prototype methods
build/132/out.js: class: static methods
build/133/out.js: class: computed static methods
build/147/out.js: super: statement in constructors
build/148/out.js: super: expression in constructors
build/150/out.js: super: in methods, method calls
build/151/out.js: super: method calls use correct "this" binding
build/154/out.js: generators: basic functionality
build/155/out.js: generators: generator function expressions
build/156/out.js: generators: correct "this" binding
build/158/out.js: generators: sending
build/160/out.js: generators: %GeneratorPrototype%.throw
build/162/out.js: generators: yield operator precedence
build/163/out.js: generators: yield *, arrays
build/164/out.js: generators: yield *, sparse arrays
build/165/out.js: generators: yield *, strings
build/167/out.js: generators: yield *, generator instances
build/170/out.js: generators: yield * on non-iterables is a runtime error
build/173/out.js: generators: shorthand generator methods
build/175/out.js: generators: computed shorthand generators
build/176/out.js: generators: shorthand generator methods, classes
build/177/out.js: generators: computed shorthand generators, classes
build/178/out.js: typed arrays: Int8Array
build/179/out.js: typed arrays: Uint8Array
build/180/out.js: typed arrays: Uint8ClampedArray
build/181/out.js: typed arrays: Int16Array
build/182/out.js: typed arrays: Uint16Array
build/183/out.js: typed arrays: Int32Array
build/184/out.js: typed arrays: Uint32Array
build/185/out.js: typed arrays: Float32Array
build/186/out.js: typed arrays: Float64Array
build/187/out.js: typed arrays: DataView (Int8)
build/188/out.js: typed arrays: DataView (Uint8)
build/189/out.js: typed arrays: DataView (Int16)
build/190/out.js: typed arrays: DataView (Uint16)
build/191/out.js: typed arrays: DataView (Int32)
build/192/out.js: typed arrays: DataView (Uint32)
build/193/out.js: typed arrays: DataView (Float32)
build/194/out.js: typed arrays: DataView (Float64)
build/196/out.js: typed arrays: constructors require new
build/200/out.js: typed arrays: %TypedArray%.prototype.subarray
build/218/out.js: typed arrays: %TypedArray%.prototype.keys
build/219/out.js: typed arrays: %TypedArray%.prototype.values
build/220/out.js: typed arrays: %TypedArray%.prototype.entries
build/223/out.js: Map: basic functionality
build/224/out.js: Map: constructor arguments
build/225/out.js: Map: constructor requires new
build/226/out.js: Map: constructor accepts null
build/227/out.js: Map: constructor invokes set
build/229/out.js: Map: Map.prototype.set returns this
build/230/out.js: Map: -0 key converts to +0
build/231/out.js: Map: Map.prototype.size
build/232/out.js: Map: Map.prototype.delete
build/233/out.js: Map: Map.prototype.clear
build/234/out.js: Map: Map.prototype.forEach
build/235/out.js: Map: Map.prototype.keys
build/236/out.js: Map: Map.prototype.values
build/237/out.js: Map: Map.prototype.entries
build/241/out.js: Set: basic functionality
build/242/out.js: Set: constructor arguments
build/243/out.js: Set: constructor requires new
build/244/out.js: Set: constructor accepts null
build/245/out.js: Set: constructor invokes add
build/247/out.js: Set: Set.prototype.add returns this
build/248/out.js: Set: -0 key converts to +0
build/249/out.js: Set: Set.prototype.size
build/250/out.js: Set: Set.prototype.delete
build/251/out.js: Set: Set.prototype.clear
build/252/out.js: Set: Set.prototype.forEach
build/253/out.js: Set: Set.prototype.keys
build/254/out.js: Set: Set.prototype.values
build/255/out.js: Set: Set.prototype.entries
build/259/out.js: WeakMap: basic functionality
build/260/out.js: WeakMap: constructor arguments
build/261/out.js: WeakMap: constructor requires new
build/262/out.js: WeakMap: constructor accepts null
build/263/out.js: WeakMap: constructor invokes set
build/264/out.js: WeakMap: frozen objects as keys
build/266/out.js: WeakMap: WeakMap.prototype.set returns this
build/267/out.js: WeakMap: WeakMap.prototype.delete
build/268/out.js: WeakMap: no WeakMap.prototype.clear method
build/269/out.js: WeakSet: basic functionality
build/270/out.js: WeakSet: constructor arguments
build/271/out.js: WeakSet: constructor requires new
build/272/out.js: WeakSet: constructor accepts null
build/273/out.js: WeakSet: constructor invokes add
build/275/out.js: WeakSet: WeakSet.prototype.add returns this
build/276/out.js: WeakSet: WeakSet.prototype.delete
build/277/out.js: WeakSet: no WeakSet.prototype.clear method
build/316/out.js: Promise: constructor requires new
build/333/out.js: well-known symbols: Symbol.iterator, existence
build/351/out.js: Object static methods: Object.is
build/353/out.js: Object static methods: Object.setPrototypeOf
build/362/out.js: function "name" property: shorthand methods (no lexical binding)
build/371/out.js: String static methods: String.raw
build/372/out.js: String static methods: String.fromCodePoint
build/373/out.js: String.prototype methods: String.prototype.codePointAt
build/375/out.js: String.prototype methods: String.prototype.repeat
build/376/out.js: String.prototype methods: String.prototype.startsWith
build/377/out.js: String.prototype methods: String.prototype.endsWith
build/378/out.js: String.prototype methods: String.prototype.includes
build/402/out.js: Array.prototype methods: Array.prototype.keys
build/404/out.js: Array.prototype methods: Array.prototype.entries
build/408/out.js: Number properties: Number.isFinite
build/409/out.js: Number properties: Number.isInteger
build/410/out.js: Number properties: Number.isSafeInteger
build/411/out.js: Number properties: Number.isNaN
build/412/out.js: Number properties: Number.EPSILON
build/413/out.js: Number properties: Number.MIN_SAFE_INTEGER
build/414/out.js: Number properties: Number.MAX_SAFE_INTEGER
build/415/out.js: Math methods: Math.clz32
build/416/out.js: Math methods: Math.imul
build/417/out.js: Math methods: Math.sign
build/418/out.js: Math methods: Math.log10
build/419/out.js: Math methods: Math.log2
build/420/out.js: Math methods: Math.log1p
build/421/out.js: Math methods: Math.expm1
build/422/out.js: Math methods: Math.cosh
build/423/out.js: Math methods: Math.sinh
build/424/out.js: Math methods: Math.tanh
build/425/out.js: Math methods: Math.acosh
build/426/out.js: Math methods: Math.asinh
build/427/out.js: Math methods: Math.atanh
build/428/out.js: Math methods: Math.trunc
build/429/out.js: Math methods: Math.fround
build/430/out.js: Math methods: Math.cbrt
build/431/out.js: Math methods: Math.hypot
build/530/out.js: Object static methods accept primitives: Object.getOwnPropertyNames
build/537/out.js: Object static methods accept primitives: Object.keys
build/538/out.js: own property order: for..in
build/539/out.js: own property order: Object.keys
build/540/out.js: own property order: Object.getOwnPropertyNames
build/542/out.js: own property order: JSON.stringify
build/543/out.js: own property order: JSON.parse
build/546/out.js: miscellaneous: no semicolon needed after do-while
build/549/out.js: miscellaneous: Invalid Date
build/554/out.js: non-strict function semantics: labeled function statements
build/557/out.js: __proto__ in object literals: multiple __proto__ is an error
build/561/out.js: Object.prototype.__proto__: get prototype
build/562/out.js: Object.prototype.__proto__: set prototype
build/563/out.js: Object.prototype.__proto__: absent from Object.create(null)
build/564/out.js: Object.prototype.__proto__: present in hasOwnProperty()
build/565/out.js: Object.prototype.__proto__: correct property descriptor
build/566/out.js: Object.prototype.__proto__: present in Object.getOwnPropertyNames()
build/567/out.js: String.prototype HTML methods: existence
build/568/out.js: String.prototype HTML methods: tags' names are lowercase
build/569/out.js: String.prototype HTML methods: quotes in arguments are escaped
build/570/out.js: RegExp.prototype.compile
build/571/out.js: RegExp syntax extensions: hyphens in character sets
build/572/out.js: RegExp syntax extensions: invalid character escapes
build/573/out.js: RegExp syntax extensions: invalid control-character escapes
build/574/out.js: RegExp syntax extensions: invalid unicode escapes
build/575/out.js: RegExp syntax extensions: invalid hexadecimal escapes
build/576/out.js: RegExp syntax extensions: incomplete patterns and quantifiers
build/577/out.js: RegExp syntax extensions: octal escape sequences
build/578/out.js: RegExp syntax extensions: invalid backreferences become octal escapes
