// misc / prototype of bound functions / subclasses
module.exports = function() {
  function correctProtoBound(superclass) {
    class C extends superclass {
      constructor() {
        return Object.create(null);
      }
    }
    var boundF = Function.prototype.bind.call(C, null);
    return Object.getPrototypeOf(boundF) === Object.getPrototypeOf(C);
  }
  return (
    correctProtoBound(function() {}) &&
    correctProtoBound(Array) &&
    correctProtoBound(null)
  );
};

----------------------------------------------------------
/Users/teppeis/src/github.com/teppeis/closure-compiler-es6-compat-table/es6/v20180402/misc/prototype_of_bound_functions/subclasses/in.js:5: ERROR - constructor is missing a call to super()
      constructor() {
      ^^^^^^^^^^^^^^^

1 error(s), 0 warning(s)
