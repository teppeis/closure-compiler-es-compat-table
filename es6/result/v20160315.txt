build/2/out.js: default function parameters: basic functionality
build/3/out.js: default function parameters: explicit undefined defers to the default
build/4/out.js: default function parameters: defaults can refer to previous params
build/6/out.js: default function parameters: temporal dead zone
build/7/out.js: default function parameters: separate scope
build/9/out.js: rest parameters: basic functionality
build/12/out.js: rest parameters: can't be used in setters
build/14/out.js: spread (...) operator: with arrays, in function calls
build/15/out.js: spread (...) operator: with arrays, in array literals
build/16/out.js: spread (...) operator: with sparse arrays, in function calls
build/18/out.js: spread (...) operator: with strings, in function calls
build/19/out.js: spread (...) operator: with strings, in array literals
build/22/out.js: spread (...) operator: with generator instances, in calls
build/23/out.js: spread (...) operator: with generator instances, in arrays
build/24/out.js: spread (...) operator: with generic iterables, in calls
build/25/out.js: spread (...) operator: with generic iterables, in arrays
build/26/out.js: spread (...) operator: with instances of iterables, in calls
build/27/out.js: spread (...) operator: with instances of iterables, in arrays
build/29/out.js: object literal extensions: computed properties
build/30/out.js: object literal extensions: shorthand properties
build/31/out.js: object literal extensions: shorthand methods
build/33/out.js: object literal extensions: computed shorthand methods
build/35/out.js: for..of loops: with arrays
build/36/out.js: for..of loops: with sparse arrays
build/37/out.js: for..of loops: with strings
build/39/out.js: for..of loops: with generator instances
build/40/out.js: for..of loops: with generic iterables
build/41/out.js: for..of loops: with instances of generic iterables
build/44/out.js: octal and binary literals: octal literals
build/45/out.js: octal and binary literals: binary literals
build/50/out.js: template literals: tagged template literals
build/57/out.js: destructuring, declarations: with arrays
build/58/out.js: destructuring, declarations: with sparse arrays
build/59/out.js: destructuring, declarations: with strings
build/61/out.js: destructuring, declarations: with generator instances
build/62/out.js: destructuring, declarations: with generic iterables
build/63/out.js: destructuring, declarations: with instances of generic iterables
build/66/out.js: destructuring, declarations: with objects
build/67/out.js: destructuring, declarations: object destructuring with primitives
build/68/out.js: destructuring, declarations: trailing commas in object patterns
build/70/out.js: destructuring, declarations: computed properties
build/71/out.js: destructuring, declarations: multiples in a single var statement
build/72/out.js: destructuring, declarations: nested
build/73/out.js: destructuring, declarations: in for-in loop heads
build/74/out.js: destructuring, declarations: in for-of loop heads
build/75/out.js: destructuring, declarations: in catch heads
build/76/out.js: destructuring, declarations: rest
build/77/out.js: destructuring, declarations: defaults
build/78/out.js: destructuring, declarations: defaults, let temporal dead zone
build/79/out.js: destructuring, assignment: with arrays
build/80/out.js: destructuring, assignment: with sparse arrays
build/81/out.js: destructuring, assignment: with strings
build/83/out.js: destructuring, assignment: with generator instances
build/84/out.js: destructuring, assignment: with generic iterables
build/85/out.js: destructuring, assignment: with instances of generic iterables
build/90/out.js: destructuring, assignment: with objects
build/91/out.js: destructuring, assignment: object destructuring with primitives
build/92/out.js: destructuring, assignment: trailing commas in object patterns
build/94/out.js: destructuring, assignment: parenthesised left-hand-side is a syntax error
build/97/out.js: destructuring, assignment: computed properties
build/98/out.js: destructuring, assignment: nested
build/99/out.js: destructuring, assignment: rest
build/101/out.js: destructuring, assignment: empty patterns
build/102/out.js: destructuring, assignment: defaults
build/103/out.js: destructuring, parameters: with arrays
build/104/out.js: destructuring, parameters: with sparse arrays
build/105/out.js: destructuring, parameters: with strings
build/107/out.js: destructuring, parameters: with generator instances
build/108/out.js: destructuring, parameters: with generic iterables
build/109/out.js: destructuring, parameters: with instances of generic iterables
build/112/out.js: destructuring, parameters: with objects
build/113/out.js: destructuring, parameters: object destructuring with primitives
build/114/out.js: destructuring, parameters: trailing commas in object patterns
build/116/out.js: destructuring, parameters: computed properties
build/117/out.js: destructuring, parameters: nested
build/118/out.js: destructuring, parameters: 'arguments' interaction
build/120/out.js: destructuring, parameters: in parameters, function 'length' property
build/121/out.js: destructuring, parameters: rest
build/122/out.js: destructuring, parameters: empty patterns
build/123/out.js: destructuring, parameters: defaults
build/124/out.js: destructuring, parameters: defaults, separate scope
build/126/out.js: Unicode code point escapes: in strings
build/130/out.js: const: basic support
build/131/out.js: const: is block-scoped
build/134/out.js: const: for loop statement scope
build/135/out.js: const: for-in loop iteration scope
build/136/out.js: const: for-of loop iteration scope
build/138/out.js: const: basic support (strict mode)
build/139/out.js: const: is block-scoped (strict mode)
build/140/out.js: const: cannot be in statements (strict mode)
build/141/out.js: const: redefining a const (strict mode)
build/142/out.js: const: for loop statement scope (strict mode)
build/143/out.js: const: for-in loop iteration scope (strict mode)
build/144/out.js: const: for-of loop iteration scope (strict mode)
build/146/out.js: let: basic support
build/147/out.js: let: is block-scoped
build/148/out.js: let: cannot be in statements
build/149/out.js: let: for loop statement scope
build/151/out.js: let: for/for-in loop iteration scope
build/152/out.js: let: basic support (strict mode)
build/153/out.js: let: is block-scoped (strict mode)
build/154/out.js: let: cannot be in statements (strict mode)
build/155/out.js: let: for loop statement scope (strict mode)
build/157/out.js: let: for/for-in loop iteration scope (strict mode)
build/158/out.js: block-level function declaration
build/159/out.js: arrow functions: 0 parameters
build/160/out.js: arrow functions: 1 parameter, no brackets
build/161/out.js: arrow functions: multiple parameters
build/162/out.js: arrow functions: lexical "this" binding
build/163/out.js: arrow functions: "this" unchanged by call or apply
build/164/out.js: arrow functions: can't be bound, can be curried
build/165/out.js: arrow functions: lexical "arguments" binding
build/166/out.js: arrow functions: no line break between params and <code>=></code>
build/167/out.js: arrow functions: correct precedence
build/169/out.js: arrow functions: lexical "super" binding in constructors
build/170/out.js: arrow functions: lexical "super" binding in methods
build/172/out.js: class: class statement
build/173/out.js: class: is block-scoped
build/176/out.js: class: constructor
build/177/out.js: class: prototype methods
build/179/out.js: class: computed prototype methods
build/180/out.js: class: optional semicolons
build/181/out.js: class: static methods
build/182/out.js: class: computed static methods
build/183/out.js: class: accessor properties
build/184/out.js: class: computed accessor properties *
build/185/out.js: class: static accessor properties *
build/196/out.js: super: statement in constructors
build/197/out.js: super: expression in constructors
build/199/out.js: super: in methods, method calls
build/200/out.js: super: method calls use correct "this" binding
build/203/out.js: super: super() invokes the correct constructor *
build/204/out.js: generators: basic functionality
build/205/out.js: generators: generator function expressions
build/206/out.js: generators: correct "this" binding
build/208/out.js: generators: sending
build/212/out.js: generators: %GeneratorPrototype%.throw
build/214/out.js: generators: yield operator precedence
build/215/out.js: generators: yield *, arrays
build/216/out.js: generators: yield *, sparse arrays
build/217/out.js: generators: yield *, strings
build/219/out.js: generators: yield *, generator instances
build/220/out.js: generators: yield *, generic iterables
build/221/out.js: generators: yield *, instances of iterables
build/225/out.js: generators: shorthand generator methods
build/227/out.js: generators: computed shorthand generators
build/228/out.js: generators: shorthand generator methods, classes
build/229/out.js: generators: computed shorthand generators, classes
build/230/out.js: generators: shorthand generators can't be constructors
build/277/out.js: Map: basic functionality **
build/278/out.js: Map: constructor arguments
build/280/out.js: Map: constructor accepts null
build/281/out.js: Map: constructor invokes set
build/283/out.js: Map: Map.prototype.set returns this
build/285/out.js: Map: Map.prototype.size
build/286/out.js: Map: Map.prototype.delete
build/287/out.js: Map: Map.prototype.clear
build/288/out.js: Map: Map.prototype.forEach
build/289/out.js: Map: Map.prototype.keys
build/290/out.js: Map: Map.prototype.values
build/291/out.js: Map: Map.prototype.entries
build/292/out.js: Map: Map.prototype[Symbol.iterator]
build/293/out.js: Map: Map.prototype isn't an instance
build/296/out.js: Set: basic functionality **
build/297/out.js: Set: constructor arguments
build/299/out.js: Set: constructor accepts null
build/300/out.js: Set: constructor invokes add
build/302/out.js: Set: Set.prototype.add returns this
build/304/out.js: Set: Set.prototype.size
build/305/out.js: Set: Set.prototype.delete
build/306/out.js: Set: Set.prototype.clear
build/307/out.js: Set: Set.prototype.forEach
build/309/out.js: Set: Set.prototype.values
build/310/out.js: Set: Set.prototype.entries
build/311/out.js: Set: Set.prototype[Symbol.iterator]
build/312/out.js: Set: Set.prototype isn't an instance
build/396/out.js: Symbol: basic functionality
build/399/out.js: Symbol: Object.defineProperty support
build/409/out.js: well-known symbols: Symbol.iterator, existence
build/433/out.js: Object static methods: Object.assign *
build/434/out.js: Object static methods: Object.is *
build/445/out.js: function "name" property: shorthand methods (no lexical binding) ?
build/455/out.js: String static methods: String.fromCodePoint **
build/456/out.js: String.prototype methods: String.prototype.codePointAt **
build/458/out.js: String.prototype methods: String.prototype.repeat
build/459/out.js: String.prototype methods: String.prototype.startsWith
build/460/out.js: String.prototype methods: String.prototype.endsWith
build/461/out.js: String.prototype methods: String.prototype.includes
build/470/out.js: Array static methods: Array.from, array-like objects **
build/471/out.js: Array static methods: Array.from, generator instances
build/472/out.js: Array static methods: Array.from, generic iterables
build/473/out.js: Array static methods: Array.from, instances of generic iterables
build/479/out.js: Array static methods: Array.of
build/481/out.js: Array.prototype methods: Array.prototype.copyWithin **
build/482/out.js: Array.prototype methods: Array.prototype.find
build/483/out.js: Array.prototype methods: Array.prototype.findIndex
build/484/out.js: Array.prototype methods: Array.prototype.fill
build/485/out.js: Array.prototype methods: Array.prototype.keys
build/486/out.js: Array.prototype methods: Array.prototype.values
build/487/out.js: Array.prototype methods: Array.prototype.entries
build/491/out.js: Number properties: Number.isFinite **
build/492/out.js: Number properties: Number.isInteger
build/493/out.js: Number properties: Number.isSafeInteger
build/494/out.js: Number properties: Number.isNaN
build/495/out.js: Number properties: Number.EPSILON
build/496/out.js: Number properties: Number.MIN_SAFE_INTEGER
build/497/out.js: Number properties: Number.MAX_SAFE_INTEGER
build/498/out.js: Math methods: Math.clz32 ** (no fround, hypot)
build/499/out.js: Math methods: Math.imul
build/500/out.js: Math methods: Math.sign
build/501/out.js: Math methods: Math.log10
build/502/out.js: Math methods: Math.log2
build/503/out.js: Math methods: Math.log1p
build/504/out.js: Math methods: Math.expm1
build/505/out.js: Math methods: Math.cosh
build/506/out.js: Math methods: Math.sinh
build/507/out.js: Math methods: Math.tanh
build/508/out.js: Math methods: Math.acosh
build/509/out.js: Math methods: Math.asinh
build/510/out.js: Math methods: Math.atanh
build/511/out.js: Math methods: Math.trunc
build/513/out.js: Math methods: Math.cbrt
build/623/out.js: own property order: Object.keys
build/625/out.js: own property order: Object.assign
build/626/out.js: own property order: JSON.stringify
build/627/out.js: own property order: JSON.parse
build/632/out.js: miscellaneous: no semicolon needed after do-while
build/635/out.js: miscellaneous: Invalid Date
build/641/out.js: non-strict function semantics: labeled function statements
build/648/out.js: Object.prototype.__proto__: get prototype
build/649/out.js: Object.prototype.__proto__: set prototype
build/654/out.js: String.prototype HTML methods: existence
build/655/out.js: String.prototype HTML methods: tags' names are lowercase
build/656/out.js: String.prototype HTML methods: quotes in arguments are escaped
build/657/out.js: RegExp.prototype.compile
build/658/out.js: RegExp syntax extensions: hyphens in character sets
build/659/out.js: RegExp syntax extensions: invalid character escapes
build/660/out.js: RegExp syntax extensions: invalid control-character escapes
build/661/out.js: RegExp syntax extensions: invalid Unicode escapes
build/662/out.js: RegExp syntax extensions: invalid hexadecimal escapes
build/663/out.js: RegExp syntax extensions: incomplete patterns and quantifiers
build/664/out.js: RegExp syntax extensions: octal escape sequences
build/665/out.js: RegExp syntax extensions: invalid backreferences become octal escapes
build/666/out.js: HTML-style comments
